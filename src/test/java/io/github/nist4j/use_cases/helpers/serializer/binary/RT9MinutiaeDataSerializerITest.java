/*
 * Copyright (C) 2025 Sopra Steria.
 *
 * Licenced under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.nist4j.use_cases.helpers.serializer.binary;

import static org.assertj.core.api.Assertions.assertThat;

import io.github.nist4j.entities.NistFile;
import io.github.nist4j.entities.record.NistRecord;
import io.github.nist4j.enums.records.RT9FieldsEnum;
import io.github.nist4j.fixtures.FixturesNistReferenceFiles;
import io.github.nist4j.test_utils.AssertNist;
import io.github.nist4j.test_utils.ImportFileUtils;
import io.github.nist4j.use_cases.ReadNistFile;
import io.github.nist4j.use_cases.helpers.NistDecoderHelper;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.nio.file.Files;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;

@Slf4j
class RT9MinutiaeDataSerializerITest {
  final RT9MinutiaeDataRecordSerializerImpl serializer =
      new RT9MinutiaeDataRecordSerializerImpl(ReadNistFile.DEFAULT_OPTIONS_FOR_READ_FILE);
  final ReadNistFile readNistFile = new ReadNistFile(ReadNistFile.DEFAULT_OPTIONS_FOR_READ_FILE);

  @Test
  void read_should_be_able_to_read_a_reference_nistFile() throws Exception {
    // Given
    File refFile = ImportFileUtils.getFileFromResource(FixturesNistReferenceFiles.TYPE_9);

    // When
    NistFile originalNistFile = readNistFile.execute(Files.newInputStream(refFile.toPath()));

    NistRecord resultRecord = originalNistFile.getRT9MinutiaeDataRecords().get(0);

    // Then
    assertThat(resultRecord).isNotNull();
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.LEN)).hasValue("3822");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.IDC)).hasValue("01");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.IMP)).hasValue("3");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.FMT)).hasValue("S");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.OFR_LEGACY)).hasValue("AFIS/FBI\u001FM");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.FGP_LEGACY)).hasValue("08");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.FPC_LEGACY)).hasValue("T\u001FLS");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.OFR_LEGACY)).hasValue("AFIS/FBI\u001FM");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.CRP_LEGACY)).hasValue("16662278");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.DLT_LEGACY)).hasValue("21951638");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.MIN_LEGACY)).hasValue("48");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.RDG_LEGACY)).hasValue("1");
    assertThat(resultRecord.getFieldText(RT9FieldsEnum.MRC_LEGACY))
        .hasValue(
            "001\u001F21952030101\u001F00\u001FD\u001F033,04\u001F255,15\u001F255,15\u001F009,06\u001F005,01\u001F047,02\u001F002,02\u001F045,03\u001E002\u001F21492030096\u001F00\u001FD\u001F045,02\u001F255,15\u001F001,02\u001F009,07\u001F047,01\u001F046,03\u001F029,06\u001F022,04\u001E003\u001F18592400096\u001F00\u001FD\u001F030,02\u001F048,02\u001F004,05\u001F007,03\u001F255,15\u001F255,15\u001F021,04\u001F032,03\u001E004\u001F20832355098\u001F00\u001FD\u001F047,02\u001F005,01\u001F009,06\u001F031,02\u001F008,02\u001F007,01\u001F003,05\u001F048,03\u001E005\u001F21442319104\u001F00\u001FD\u001F047,01\u001F255,15\u001F009,05\u001F255,15\u001F031,01\u001F004,01\u001F048,04\u001F046,03\u001E006\u001F21292532112\u001F00\u001FD\u001F031,00\u001F009,03\u001F255,15\u001F255,15\u001F255,15\u001F008,01\u001F003,07\u001F004,03\u001E007\u001F19562553112\u001F00\u001FD\u001F004,01\u001F006,03\u001F008,02\u001F255,15\u001F255,15\u001F255,15\u001F021,06\u001F003,03\u001E008\u001F20572558111\u001F00\u001FD\u001F031,01\u001F006,01\u001F255,15\u001F255,15\u001F255,15\u001F255,15\u001F007,02\u001F048,04\u001E009\u001F23322345107\u001F00\u001FD\u001F033,08\u001F255,15\u001F255,15\u001F255,15\u001F255,15\u001F031,04\u001F005,05\u001F047,07\u001E010\u001F21231506193\u001F00\u001FD\u001F034,01\u001F009,11\u001F045,04\u001F023,04\u001F019,01\u001F036,03\u001F255,15\u001F035,01\u001E011\u001F17981222201\u001F00\u001FD\u001F010,04\u001F036,01\u001F016,02\u001F012,02\u001F255,15\u001F255,15\u001F255,15\u001F255,15\u001E012\u001F16761252203\u001F00\u001FD\u001F016,00\u001F022,02\u001F024,11\u001F013,04\u001F255,15\u001F255,15\u001F255,15\u001F011,02\u001E013\u001F14781334203\u001F00\u001FD\u001F022,04\u001F024,07\u001F020,04\u001F017,02\u001F255,15\u001F255,15\u001F255,15\u001F012,04\u001E014\u001F11481501210\u001F00\u001FD\u001F024,02\u001F026,03\u001F255,15\u001F255,15\u001F255,15\u001F255,15\u001F255,15\u001F020,03\u001E015\u001F19611400210\u001F00\u001FD\u001F019,00\u001F023,03\u001F022,03\u001F024,12\u001F016,01\u001F036,02\u001F255,15\u001F255,15\u001E016\u001F17731293211\u001F00\u001FD\u001F036,00\u001F022,02\u001F024,11\u001F013,04\u001F012,00\u001F255,15\u001F011,02\u001F255,15\u001E017\u001F13611349211\u001F00\u001FD\u001F022,05\u001F020,02\u001F255,15\u001F014,05\u001F255,15\u001F255,15\u001F255,15\u001F013,02\u001E018\u001F14882421218\u001F00\u001FD\u001F007,06\u001F255,15\u001F255,15\u001F255,15\u001F255,15\u001F025,02\u001F037,02\u001F021,02\u001E019\u001F20221440215\u001F00\u001FD\u001F010,01\u001F023,03\u001F042,12\u001F022,03\u001F015,00\u001F255,15\u001F255,15\u001F035,01\u001E020\u001F13611461224\u001F00\u001FD\u001F024,02\u001F026,06\u001F255,15\u001F014,03\u001F255,15\u001F017,02\u001F013,04\u001F016,08\u001E021\u001F15652385220\u001F00\u001FD\u001F007,06\u001F255,15\u001F255,15\u001F018,02\u001F037,01\u001F026,02\u001F038,03\u001F003,04\u001E022\u001F18591481224\u001F00\u001FD\u001F023,02\u001F029,04\u001F042,09\u001F013,04\u001F016,02\u001F011,05\u001F015,03\u001F019,03\u001E023\u001F20321603235\u001F00\u001FD\u001F045,02\u001F029,05\u001F042,10\u001F013,05\u001F022,02\u001F019,03\u001F010,04\u001F033,03\u001E024\u001F15091740239\u001F00\u001FD\u001F040,00\u001F026,04\u001F255,15\u001F014,02\u001F020,02\u001F013,07\u001F022,10\u001F042,00\u001E025\u001F14882263244\u001F00\u001FD\u001F037,01\u001F018,02\u001F255,15\u001F039,01\u001F020,07\u001F026,01\u001F041,03\u001F038,02\u001E026\u001F15292182243\u001F00\u001FD\u001F021,02\u001F025,01\u001F039,02\u001F255,15\u001F020,06\u001F040,03\u001F027,03\u001F041,01\u001E027\u001F16462055249\u001F00\u001FD\u001F043,01\u001F041,01\u001F255,15\u001F255,15\u001F040,00\u001F023,11\u001F028,03\u001F030,03\u001E028\u001F18292045250\u001F00\u001FD\u001F048,02\u001F030,01\u001F027,03\u001F040,03\u001F020,02\u001F029,03\u001F002,08\u001F044,01\u001E029\u001F19201923256\u001F00\u001FD\u001F046,01\u001F044,02\u001F027,06\u001F042,05\u001F022,04\u001F023,05\u001F045,06\u001F002,06\u001E030\u001F18142136262\u001F00\u001FD\u001F003,02\u001F032,02\u001F043,03\u001F027,03\u001F028,01\u001F044,03\u001F046,06\u001F048,04\u001E031\u001F21342405290\u001F00\u001FD\u001F006,00\u001F007,02\u001F003,06\u001F004,02\u001F005,01\u001F009,04\u001F255,15\u001F255,15\u001E032\u001F17532248290\u001F00\u001FD\u001F255,15\u001F038,02\u001F041,02\u001F043,01\u001F030,02\u001F048,06\u001F004,09\u001F003,03\u001E033\u001F23321562329\u001F00\u001FD\u001F045,03\u001F035,01\u001F255,15\u001F034,01\u001F255,15\u001F255,15\u001F255,15\u001F001,04\u001E034\u001F23271516350\u001F00\u001FD\u001F010,01\u001F035,01\u001F255,15\u001F255,15\u001F255,15\u001F255,15\u001F033,01\u001F045,04\u001E035\u001F21791461016\u001F00\u001FD\u001F019,01\u001F255,15\u001F255,15\u001F255,15\u001F034,01\u001F009,11\u001F045,05\u001F010,01\u001E036\u001F19201339030\u001F00\u001FD\u001F016,00\u001F255,15\u001F255,15\u001F255,15\u001F019,02\u001F015,02\u001F022,04\u001F013,06\u001E037\u001F15442375045\u001F00\u001FD\u001F025,01\u001F026,02\u001F038,03\u001F003,04\u001F021,01\u001F255,15\u001F018,02\u001F255,15\u001E038\u001F16662268056\u001F00\u001FD\u001F041,01\u001F043,01\u001F032,02\u001F048,08\u001F003,06\u001F255,15\u001F021,03\u001F026,01\u001E039\u001F14632243052\u001F00\u001FD\u001F014,05\u001F040,05\u001F026,02\u001F041,04\u001F025,01\u001F018,02\u001F255,15\u001F255,15\u001E040\u001F16101979058\u001F00\u001FD\u001F024,00\u001F042,01\u001F029,06\u001F028,03\u001F027,00\u001F026,03\u001F255,15\u001F255,15\u001E041\u001F16362223059\u001F00\u001FD\u001F024,02\u001F027,01\u001F043,02\u001F032,02\u001F038,01\u001F021,04\u001F025,03\u001F026,01\u001E042\u001F15951796057\u001F00\u001FD\u001F020,02\u001F016,10\u001F022,09\u001F029,05\u001F027,01\u001F040,01\u001F255,15\u001F024,00\u001E043\u001F16972187072\u001F00\u001FD\u001F027,01\u001F028,03\u001F030,03\u001F032,01\u001F003,04\u001F038,01\u001F041,02\u001F255,15\u001E044\u001F18902055071\u001F00\u001FD\u001F022,05\u001F029,02\u001F002,07\u001F046,03\u001F048,01\u001F030,03\u001F043,05\u001F028,01\u001E045\u001F21441781077\u001F00\u001FD\u001F023,02\u001F033,03\u001F255,15\u001F255,15\u001F002,02\u001F044,08\u001F029,06\u001F022,03\u001E046\u001F20222141085\u001F00\u001FD\u001F029,01\u001F002,03\u001F047,02\u001F005,03\u001F004,03\u001F048,01\u001F030,06\u001F044,03\u001E047\u001F21132106089\u001F00\u001FD\u001F045,01\u001F002,01\u001F255,15\u001F009,07\u001F005,01\u001F048,03\u001F046,02\u001F029,04\u001E048\u001F19712223085\u001F00\u001FD\u001F044,01\u001F046,01\u001F255,15\u001F004,03\u001F007,01\u001F003,02\u001F032,06\u001F030,04");
  }

  @Test
  void write_should_be_able_to_read_a_nistFile() throws Exception {
    // Given
    File nistType3File = ImportFileUtils.getFileFromResource(FixturesNistReferenceFiles.TYPE_9);
    NistFile originalNistFile = readNistFile.execute(Files.newInputStream(nistType3File.toPath()));

    NistRecord originalRecord = originalNistFile.getRT9MinutiaeDataRecords().get(0);

    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    // When I write
    serializer.write(outputStream, originalRecord);

    // Then
    assertThat(outputStream.toByteArray()).isNotNull();
    log.debug("originalRecord: \n{}", originalRecord);

    // And When I read
    byte[] resultBytes = outputStream.toByteArray();
    NistDecoderHelper.Token token = new NistDecoderHelper.Token(resultBytes);
    token.crt = 7;
    NistRecord resultRecord = serializer.read(token);

    // Then
    log.debug("resultRecord \n{}", resultRecord.toString());
    assertThat(resultRecord).isNotNull();

    AssertNist.assertRecordEquals(resultRecord, originalRecord);
  }
}
